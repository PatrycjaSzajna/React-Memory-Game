[{"/home/patrycja/Desktop/memory-kopia/src/index.js":"1","/home/patrycja/Desktop/memory-kopia/src/App.js":"2","/home/patrycja/Desktop/memory-kopia/src/components/Navbar.js":"3","/home/patrycja/Desktop/memory-kopia/src/components/Footer.js":"4","/home/patrycja/Desktop/memory-kopia/src/components/Home.js":"5","/home/patrycja/Desktop/memory-kopia/src/components/Game.js":"6","/home/patrycja/Desktop/memory-kopia/src/components/Scores.js":"7","/home/patrycja/Desktop/memory-kopia/src/components/Card.js":"8"},{"size":286,"mtime":1612561972000,"results":"9","hashOfConfig":"10"},{"size":736,"mtime":1612650186000,"results":"11","hashOfConfig":"10"},{"size":1317,"mtime":1612698036000,"results":"12","hashOfConfig":"10"},{"size":670,"mtime":1612618740000,"results":"13","hashOfConfig":"10"},{"size":2339,"mtime":1612634376000,"results":"14","hashOfConfig":"10"},{"size":10892,"mtime":1613125909035,"results":"15","hashOfConfig":"10"},{"size":2598,"mtime":1612703776000,"results":"16","hashOfConfig":"10"},{"size":494,"mtime":1612645806000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"7wzxaj",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/home/patrycja/Desktop/memory-kopia/src/index.js",[],["38","39"],"/home/patrycja/Desktop/memory-kopia/src/App.js",[],"/home/patrycja/Desktop/memory-kopia/src/components/Navbar.js",[],"/home/patrycja/Desktop/memory-kopia/src/components/Footer.js",[],"/home/patrycja/Desktop/memory-kopia/src/components/Home.js",["40","41"],"import { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Home = (props) => {\r\n  const { user, setUser } = props.data;\r\n  const history = useHistory();\r\n\r\n  const [username, setUsername] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [formValid, setFormValid] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Sprawdzenie błędów w nazwie gracza\r\n    if (username.trim().length < 1) {\r\n      setError('Podaj nazwę gracza');\r\n    } else if (username.trim().length > 10) {\r\n      setError('Nazwa jest za długa (max 10 znaków)');\r\n    } else {\r\n      setError('');\r\n      setFormValid(true);\r\n      setUser(username.trim());\r\n    }\r\n  };\r\n\r\n  // Przekierowanie użytkownika do /game po prawidłowym ustawieniu nazwy\r\n  useEffect(async () => {\r\n    if (user && formValid) {\r\n      await setFormValid(false);\r\n      history.push('/game');\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <>\r\n      <div className='offset'></div>\r\n      <div className='container'>\r\n        <div className='row'>\r\n          <div className='col-12'>\r\n            <form\r\n              className='mb-3'\r\n              style={{ maxWidth: '300px', margin: '0 auto' }}\r\n              autoComplete='off'\r\n            >\r\n              <div className='mb-3'>\r\n                <label\r\n                  htmlFor='username'\r\n                  className='form-label text-center'\r\n                  style={{ display: 'block', fontSize: '20px' }}\r\n                >\r\n                  PODAJ NAZWĘ GRACZA\r\n                </label>\r\n                <input\r\n                  onChange={(e) => {\r\n                    setUsername(e.target.value);\r\n                  }}\r\n                  value={username}\r\n                  type='text'\r\n                  className='form-control'\r\n                  id='username'\r\n                />\r\n              </div>\r\n              {error && <div className='alert alert-danger'>{error}</div>}\r\n              <button\r\n                onClick={handleSubmit}\r\n                className='btn btn-primary'\r\n                style={{ display: 'block', margin: '0 auto' }}\r\n              >\r\n                Graj\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","/home/patrycja/Desktop/memory-kopia/src/components/Game.js",["42","43","44","45","46","47"],"import { useEffect, useState } from 'react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Card from './Card';\r\n\r\n// Obrazki kart\r\nimport img1 from '../images/card1.jpg';\r\nimport img2 from '../images/card2.jpg';\r\nimport img3 from '../images/card3.jpg';\r\nimport img4 from '../images/card4.jpg';\r\nimport img5 from '../images/card5.jpg';\r\nimport img6 from '../images/card6.jpg';\r\nimport img7 from '../images/card7.jpg';\r\nimport img8 from '../images/card8.jpg';\r\n\r\nconst Game = (props) => {\r\n  const { user } = props.data;\r\n  const history = useHistory();\r\n\r\n  // Lokalny state\r\n  const [intervalId, setIntervalId] = useState(null);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [gameFinished, setGameFinished] = useState(false);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [cards, setCards] = useState([]);\r\n  const [pick1, setPick1] = useState({});\r\n  const [pick2, setPick2] = useState({});\r\n  const [pairs, setPairs] = useState(0);\r\n  const [error, setError] = useState('');\r\n\r\n  // Przekieruj użytkownika jeżeli nie podał nazwy gracza\r\n  useEffect(() => {\r\n    !user && history.push('/');\r\n  }, []);\r\n\r\n  // Tasowanie kart przed rozpoczęciem gry\r\n  useEffect(() => {\r\n    const deck = [\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'A',\r\n        value: 1,\r\n        img: img1,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'B',\r\n        value: 1,\r\n        img: img1,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'C',\r\n        value: 2,\r\n        img: img2,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'D',\r\n        value: 2,\r\n        img: img2,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'E',\r\n        value: 3,\r\n        img: img3,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'F',\r\n        value: 3,\r\n        img: img3,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'G',\r\n        value: 4,\r\n        img: img4,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'H',\r\n        value: 4,\r\n        img: img4,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'I',\r\n        value: 5,\r\n        img: img5,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'J',\r\n        value: 5,\r\n        img: img5,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'K',\r\n        value: 6,\r\n        img: img6,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'L',\r\n        value: 6,\r\n        img: img6,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'M',\r\n        value: 7,\r\n        img: img7,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'N',\r\n        value: 7,\r\n        img: img7,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'O',\r\n        value: 8,\r\n        img: img8,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        sort: Math.random() * 100,\r\n        name: 'P',\r\n        value: 8,\r\n        img: img8,\r\n        blocked: false,\r\n        active: false,\r\n      },\r\n    ];\r\n\r\n    deck.sort((a, b) => {\r\n      return parseFloat(a.sort) - parseFloat(b.sort);\r\n    });\r\n\r\n    setCards(deck);\r\n  }, []);\r\n\r\n  // Start timera po rozpoczęciu gry\r\n  useEffect(() => {\r\n    if (gameStarted) {\r\n      const iid = setInterval(() => {\r\n        setSeconds((prev) => prev + 1);\r\n      }, 1000);\r\n      setIntervalId(iid);\r\n    }\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [gameStarted]);\r\n\r\n  // Wybór kart\r\n  const pickCard = async (id, value) => {\r\n    // Wybór pierwszej karty\r\n    if (Object.keys(pick1).length === 0) {\r\n      setPick1({ id, value });\r\n      const newCards = cards;\r\n      newCards.forEach((card) => {\r\n        if (card.id == id) {\r\n          card.active = true;\r\n          card.blocked = true;\r\n        }\r\n      });\r\n      setCards(newCards);\r\n    }\r\n\r\n    // Wybór drugiej karty\r\n    else {\r\n      setPick2({ id, value });\r\n      const newCards = cards;\r\n      newCards.forEach((card) => {\r\n        if (card.id == id) {\r\n          card.active = true;\r\n          card.blocked = true;\r\n        }\r\n        // Po wyboże drugiej karty zablokuj pozostałe\r\n        card.blocked = true;\r\n      });\r\n      setCards(newCards);\r\n    }\r\n  };\r\n\r\n  // Porónanie kart\r\n  useEffect(() => {\r\n    if (Object.keys(pick2).length !== 0 && pick1.value && pick2.value) {\r\n      // Jeżeli karty do siebie pasują (value)\r\n      if (pick1.value === pick2.value) {\r\n        const newCards = cards;\r\n        newCards.forEach((card) => {\r\n          if (card.active !== true) {\r\n            card.blocked = false;\r\n          }\r\n        });\r\n        setCards(newCards);\r\n        setPairs((prev) => prev + 1);\r\n        setPick1({});\r\n        setPick2({});\r\n      }\r\n\r\n      // Jeżeli karty do siebie nie pasują (value)\r\n      else {\r\n        setTimeout(() => {\r\n          const newCards = cards;\r\n          newCards.forEach((card) => {\r\n            if (\r\n              card.active === true &&\r\n              (card.id === pick1.id || card.id === pick2.id)\r\n            ) {\r\n              card.active = false;\r\n              card.blocked = false;\r\n            } else {\r\n              card.blocked = false;\r\n            }\r\n          });\r\n          setPick1({});\r\n          setPick2({});\r\n        }, 2000);\r\n      }\r\n    }\r\n  }, [pick2.value]);\r\n\r\n  // Reset gry\r\n  const handleReset = () => {\r\n    clearInterval(intervalId);\r\n    setGameStarted(false);\r\n    setGameFinished(false);\r\n    setSeconds(0);\r\n    setPick1({});\r\n    setPick2({});\r\n    setPairs(0);\r\n\r\n    const newCards = [...cards];\r\n    newCards.forEach((card) => {\r\n      card.sort = Math.random() * 100;\r\n      card.active = false;\r\n      card.blocked = false;\r\n    });\r\n\r\n    newCards.sort((a, b) => {\r\n      return parseFloat(a.sort) - parseFloat(b.sort);\r\n    });\r\n\r\n    setCards(newCards);\r\n  };\r\n\r\n  // Zakończenie gry i zapisanie wyniku\r\n  useEffect(() => {\r\n    if (pairs === 8) {\r\n      clearInterval(intervalId);\r\n      setGameFinished(true);\r\n\r\n      // Zapisanie danych do bazy danych\r\n      const data = { name: user, time: seconds };\r\n\r\n      fetch('http://localhost:5000/users', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.name) {\r\n          } else {\r\n            throw Error;\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          setError('Błąd bazy danych - wynik nie został zapisany.');\r\n        });\r\n    }\r\n  }, [pairs]);\r\n\r\n  return (\r\n    <>\r\n      {user && (\r\n        <>\r\n          <div className='container game-container'>\r\n            <div className='game-wrapper'>\r\n              <div className='row'>\r\n                <div className='col-12'>\r\n                  <div className='game-data-wrapper'>\r\n                    <div className='player'>\r\n                      <p className='player'>Gracz</p>\r\n                      <h4 className='player'>{user}</h4>\r\n                    </div>\r\n                    <div className='reset'>\r\n                      {gameStarted && (\r\n                        <button\r\n                          onClick={() => handleReset()}\r\n                          className='btn btn-primary'\r\n                        >\r\n                          Restart\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                    <div className='time'>\r\n                      <p className='time'>Czas</p>\r\n                      <h4 className='time'>{seconds}</h4>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className='col-12 text-center'\r\n                  style={{ position: 'relative' }}\r\n                >\r\n                  {gameStarted &&\r\n                    !gameFinished &&\r\n                    cards.map((card) => (\r\n                      <Card key={card.id} card={card} pickCard={pickCard} />\r\n                    ))}\r\n\r\n                  {(!gameStarted || gameFinished) && (\r\n                    <div className='info-box'>\r\n                      {!gameStarted && !gameFinished && (\r\n                        <div className='info-content'>\r\n                          <h4 style={{ marginBottom: '20px' }}>\r\n                            Jesteś gotowy?\r\n                          </h4>\r\n                          <button\r\n                            onClick={() => setGameStarted(true)}\r\n                            className='btn btn-primary'\r\n                          >\r\n                            Rozpocznij\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {gameFinished && (\r\n                        <div className='info-content'>\r\n                          <h5 style={{ marginBottom: '20px' }}>KONIEC GRY</h5>\r\n                          <p className='myscore'>TWÓJ WYNIK</p>\r\n                          <h1>{seconds}</h1>\r\n                          <Link to='/scores' className='btn btn-primary'>\r\n                            Zobacz wyniki\r\n                          </Link>\r\n                          {error && (\r\n                            <div className='alert alert-danger mt-2'>\r\n                              {error}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n      {!user && null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","/home/patrycja/Desktop/memory-kopia/src/components/Scores.js",[],"/home/patrycja/Desktop/memory-kopia/src/components/Card.js",["48"],"const Card = ({ card, pickCard }) => {\r\n  return (\r\n    <div\r\n      className={`card-box ${card.blocked && 'blocked'} ${\r\n        card.active && 'active'\r\n      }`}\r\n    >\r\n      <div className='card-content'>\r\n        <img\r\n          draggable={false}\r\n          src={card.img}\r\n          alt='image'\r\n          onClick={() => {\r\n            !card.blocked && !card.active && pickCard(card.id, card.value);\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":28,"column":13,"nodeType":"55","endLine":33,"endColumn":4},{"ruleId":"53","severity":1,"message":"56","line":33,"column":6,"nodeType":"57","endLine":33,"endColumn":12,"suggestions":"58"},{"ruleId":"53","severity":1,"message":"59","line":34,"column":6,"nodeType":"57","endLine":34,"endColumn":8,"suggestions":"60"},{"ruleId":"53","severity":1,"message":"61","line":203,"column":6,"nodeType":"57","endLine":203,"endColumn":19,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":212,"column":21,"nodeType":"65","messageId":"66","endLine":212,"endColumn":23},{"ruleId":"63","severity":1,"message":"64","line":225,"column":21,"nodeType":"65","messageId":"66","endLine":225,"endColumn":23},{"ruleId":"53","severity":1,"message":"67","line":273,"column":6,"nodeType":"57","endLine":273,"endColumn":19,"suggestions":"68"},{"ruleId":"53","severity":1,"message":"69","line":326,"column":6,"nodeType":"57","endLine":326,"endColumn":13,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":9,"column":9,"nodeType":"73","endLine":16,"endColumn":11},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'formValid' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.",["77"],"React Hook useEffect has a missing dependency: 'intervalId'. Either include it or remove the dependency array.",["78"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'cards', 'pick1.id', 'pick1.value', and 'pick2'. Either include them or remove the dependency array.",["79"],"React Hook useEffect has missing dependencies: 'intervalId', 'seconds', and 'user'. Either include them or remove the dependency array.",["80"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [formValid, history, user]",{"range":"91","text":"92"},"Update the dependencies array to be: [history, user]",{"range":"93","text":"94"},"Update the dependencies array to be: [gameStarted, intervalId]",{"range":"95","text":"96"},"Update the dependencies array to be: [cards, pick1.id, pick1.value, pick2, pick2.value]",{"range":"97","text":"98"},"Update the dependencies array to be: [intervalId, pairs, seconds, user]",{"range":"99","text":"100"},[948,954],"[formValid, history, user]",[1182,1184],"[history, user]",[4669,4682],"[gameStarted, intervalId]",[6512,6525],"[cards, pick1.id, pick1.value, pick2, pick2.value]",[7789,7796],"[intervalId, pairs, seconds, user]"]